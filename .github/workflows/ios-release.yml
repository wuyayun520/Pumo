name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products
          
      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
        
      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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


          certificate-password: 111111
          
          provisioning-profile-base64: 

          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa


      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/pumo.ipa"
          APPLE_ID: "kema7788@outlook.com"
          APP_SPECIFIC_PASSWORD: "bcju-mmdj-zcxx-pamp"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
